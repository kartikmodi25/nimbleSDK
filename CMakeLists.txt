cmake_minimum_required(VERSION 3.18)
#add_compile_options(-std=gnu++14 )

project(nimbleSDK)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CPP_COMPILER g++)
include(CMakePrintHelpers)

add_subdirectory(nimblenet)
set(JSON_BuildTests OFF CACHE INTERNAL "")
add_subdirectory(thirdparty/json)
add_subdirectory(thirdparty/sqlite)
target_link_libraries(nimblenet PRIVATE sqlite3)
if(TORCH_EXECUTOR)
	add_definitions( -DTORCH_EXECUTOR )
	message("Using TORCH_EXECUTOR")
else()
	add_definitions( -DONNX_EXECUTOR )
	message("Using ONNX_EXECUTOR")
endif()
if (ANDROID_ABI)
#	add_subdirectory(android)
    target_link_libraries(nimblenet PRIVATE nlohmann_json::nlohmann_json)
else() 
    add_executable(nimbleclient main.cpp)
    add_subdirectory(linux)
    if(TORCH_EXECUTOR)
	target_include_directories(nimblenet PRIVATE "${PROJECT_SOURCE_DIR}/libLinux/libtorch/include/")
	target_link_libraries(nimblenet clientlib ${PROJECT_SOURCE_DIR}/libLinux/libtorch/lib/libtorch.so
						  ${PROJECT_SOURCE_DIR}/libLinux/libtorch/lib/libtorch_cpu.so
						  ${PROJECT_SOURCE_DIR}/libLinux/libtorch/lib/libc10.so
						  ${PROJECT_SOURCE_DIR}/libLinux/libtorch/lib/libcpuinfo.a
						  ${PROJECT_SOURCE_DIR}/libLinux/libtorch/lib/libclog.a) 
    else()
        target_include_directories(nimblenet PRIVATE "${PROJECT_SOURCE_DIR}/libLinux/onnx/include/")
		if(MACOS)
			target_link_libraries(nimblenet PRIVATE ${PROJECT_SOURCE_DIR}/libLinux/onnx/lib/libonnxruntime.dylib)
		else()
			target_link_libraries(nimblenet  PRIVATE ${PROJECT_SOURCE_DIR}/libLinux/onnx/lib/libonnxruntime.so)
		endif()
    endif()
    target_link_libraries(nimblenet PRIVATE clientlib PRIVATE nlohmann_json::nlohmann_json)
    target_link_libraries(nimbleclient PRIVATE nimblenet)
endif()

## For Tests
#if(NOT ANDROID_ABI)
#  add_subdirectory(scripts/tests)
#endif()
